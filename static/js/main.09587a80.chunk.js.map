{"version":3,"sources":["store/store.ts","common/getTranslation.ts","components/currency-table/index.tsx","components/currency-chart/index.tsx","common/getDateInterval.ts","hooks/useFetch.tsx","app.tsx","index.tsx"],"names":["store","currencyData","historicalData","currencyState","historicalState","makeAutoObservable","this","data","newState","translator","key","EUR","name","symbol","USD","GBP","observer","tableHead","tableData","currencies","push","Intl","NumberFormat","format","rate_float","className","map","th","nanoid","td","dates","bitcoinValues","historicalCurrency","chartData","labels","datasets","label","borderColor","fill","options","responsive","legend","position","getDateInterval","numberOfDays","today","Date","endDate","toISOString","slice","setDate","getDate","startDate","useFetch","useEffect","fetch","then","response","json","setCurrencyData","bpi","setCurrencyState","catch","setHistoricalData","setHistoricalState","App","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09587a80.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nclass Store {\n    currencyData = {};\n    historicalData = {};\n    currencyState = \"fetching\";\n    historicalState = \"fetching\";\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setCurrencyData(data: {}) {\n        this.currencyData = data;\n    }\n\n    setHistoricalData(data: {}) {\n        this.historicalData = data;\n    }\n\n    setCurrencyState(newState: string) {\n        this.currencyState = newState;\n    }\n\n    setHistoricalState(newState: string) {\n        this.historicalState = newState;\n    }\n}\n\nconst store = new Store();\n\nexport default store;\n","interface Translate {\n    [key: string]: {\n        name: string;\n        symbol: string;\n    };\n}\n\nconst translator = (key: string) => {\n    const translate: Translate = {\n        EUR: { name: \"Euro\", symbol: \"€\" },\n        USD: { name: \"Dólar\", symbol: \"$\" },\n        GBP: { name: \"Libra Esterlina\", symbol: \"£\" },\n    };\n    const { name, symbol } = translate[key];\n    return { name, symbol };\n};\n\nexport default translator;\n","import { observer } from \"mobx-react-lite\";\nimport store from \"../../store/store\";\nimport translator from \"../../common/getTranslation\";\nimport { nanoid } from \"nanoid\";\nimport \"./currency-table.css\";\nimport React from \"react\";\n\ninterface Currency {\n    [key: string]: {\n        code: string;\n        description: string;\n        rate: string;\n        rate_float: number;\n        symbol: string;\n    };\n}\n\nconst CurrencyTable: React.FC = () => {\n    let tableHead: string[] = [];\n    let tableData: string[] = [];\n    if (store.currencyState === \"fetched\") {\n        const currencies: Currency = store.currencyData;\n        for (const key in currencies) {\n            tableHead.push(translator(key).name);\n            tableData.push(\n                `${translator(key).symbol}\n                ${new Intl.NumberFormat(\"de-DE\").format(currencies[key].rate_float)}`\n            );\n        }\n    } else if (store.currencyState === \"fetching\") {\n        return <h2>Carregando</h2>;\n    } else if (store.currencyState == \"error\") {\n        return <h2>Erro</h2>;\n    }\n\n    return (\n        <div className=\"CurrencyTable\">\n            <table>\n                <thead>\n                    <tr>\n                        {tableHead.map((th) => (\n                            <th key={nanoid()}>{th}</th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        {tableData.map((td) => (\n                            <td key={nanoid()}>{td}</td>\n                        ))}\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default observer(CurrencyTable);\n","import { observer } from \"mobx-react-lite\";\nimport { Line } from \"react-chartjs-2\";\nimport store from \"../../store/store\";\nimport \"./currency-chart.css\";\nimport React from \"react\";\n\ninterface HistoricalCurrency {\n    [key: string]: number;\n}\n\nconst CurrencyChart: React.FC = () => {\n    let dates: string[] = [];\n    let bitcoinValues: number[] = [];\n\n    if (store.historicalState === \"fetched\") {\n        const historicalCurrency: HistoricalCurrency = store.historicalData;\n        for (const key in historicalCurrency) {\n            dates.push(key);\n            bitcoinValues.push(historicalCurrency[key]);\n        }\n    } else if (store.historicalState === \"fetching\") {\n        return <h2>Carregando</h2>;\n    } else if (store.historicalState == \"error\") {\n        return <h2>Erro</h2>;\n    }\n\n    const chartData = {\n        labels: dates,\n        datasets: [\n            {\n                label: \"Preço do Bitcoin em dólar.\",\n                data: bitcoinValues,\n                borderColor: \"#C04159\",\n                fill: false,\n            },\n        ],\n    };\n\n    const options = {\n        responsive: true,\n        legend: {\n            position: \"bottom\",\n        },\n    };\n\n    return (\n        <div className=\"CurrencyChart\">\n            <Line data={chartData} options={options} />\n        </div>\n    );\n};\n\nexport default observer(CurrencyChart);\n","const getDateInterval = (numberOfDays: number) => {\n    const today = new Date();\n    const endDate = today.toISOString().slice(0, 10);\n    today.setDate(today.getDate() - numberOfDays);\n    const startDate = today.toISOString().slice(0, 10);\n\n    return { startDate, endDate };\n};\n\nexport default getDateInterval;\n","import store from \"../store/store\";\nimport getDateInterval from \"../common/getDateInterval\";\nimport { useEffect } from \"react\";\n\nconst useFetch = () => {\n    useEffect(() => {\n        fetch(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n            .then((response) => response.json())\n            .then((data) => store.setCurrencyData(data.bpi))\n            .then(() => store.setCurrencyState(\"fetched\"))\n            .catch(() => {\n                store.setCurrencyState(\"error\");\n            });\n\n        const { startDate, endDate } = getDateInterval(7);\n        fetch(`https://api.coindesk.com/v1/bpi/historical/close.json?start=${startDate}&end=${endDate}`)\n            .then((response) => response.json())\n            .then((data) => store.setHistoricalData(data.bpi))\n            .then(() => store.setHistoricalState(\"fetched\"))\n            .catch(() => {\n                store.setHistoricalState(\"error\");\n            });\n    }, []);\n};\n\nexport default useFetch;\n","import CurrencyTable from \"./components/currency-table\";\nimport CurrencyChart from \"./components/currency-chart\";\nimport useFetch from \"./hooks/useFetch\";\nimport React from \"react\";\nimport \"./app.css\";\n\nconst App: React.FC = () => {\n    useFetch();\n    return (\n        <div className=\"App\">\n            <h1>₿ITCOIN</h1>\n            <CurrencyTable />\n            <CurrencyChart />\n            <a href=\"https://www.coindesk.com/price/bitcoin\">Powered by CoinDesk</a>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}